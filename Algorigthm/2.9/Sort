
var datas = [23,3,43,12,78,2,90,4,1,11,8,41,5,2];

// 冒泡排序*****************************************************************************************************************************
function bubbleSort(numbers) {


}

// 选择排序*****************************************************************************************************************************
function selectSort(numbers) {


}

// 插入排序*****************************************************************************************************************************
function insertSort(numbers) {
  var len = numbers.length;

  for (var i= 1; i < len; i++) {
    var value_i = numbers[i];
    var j = i - 1;

    while (j > -1 && numbers[j] > value_i) {
      numbers[j + 1] = numbers[j];
      j--;
    }

    j++;
    numbers[j] = value_i;
  }
  return numbers;
}

// 希尔排序*****************************************************************************************************************************
function shellSort(numbers) {

}


// 快速排序*****************************************************************************************************************************

function division(numbers, left, right) {

}

function quickSort(numbers,leftIndex,rightIndex) {

}

// 归并排序 *****************************************************************************************************************************
function mergeSort(numbers) {
  function min(a,b) {
    return a > b ? b : a;
  }

  var len = numbers.length;
  var b = [];
  var k = 0;
  for (var gap = 1; gap < len; gap += gap) {
    k = 0;

    for (var index = 0; index < len; index += gap + gap) {
      var start1 = index;
      var end1 = min(start1 + gap,len);
      var start2 = end1;
      var end2 = min(start2 + gap,len);

      while (start1 < end1 && start2 < end2) {
        b[k++] = numbers[start1] < numbers[start2] ? numbers[start1++] : numbers[start2++];
      }

      while (start1 < end1) {
        b[k++] = numbers[start1++];
      }

      while (start2 < end2) {
        b[k++] = numbers[start2++];
      }
    }

    for (var i = 0; i < len ;i++) {
      numbers[i] = b[i];
    }
  }
  return numbers;
}

// 桶排序 *****************************************************************************************************************************
function bucketSort(numbers) {

}


// 堆排序 *****************************************************************************************************************************
function  heapSort(numbers) {
  var size = numbers.length;

  buildHeap(numbers);

  for (var i = size - 1; i >= 0; i--) {
    swap(numbers,0, i);
    adjustHeap(numbers, 0, i);
  }

  // 建堆
  function buildHeap(a) {
    var size = a.length;
    for (var i = Math.floor((size - 1)/2); i >= 0; i--) {
      adjustHeap(a, i, size);
    }
 }

  // 调整堆
  function adjustHeap(a, index, size) {
    var lchild = index * 2 + 1;
    var rchild = index * 2 + 2;
    var max = index;

      if (lchild < size && a[lchild] > a[max]) {
        max = lchild;
      }

      if (rchild < size && a[rchild] > a[max]) {
        max = rchild;
      }

      if (max != index) {
        swap(a, index, max);
        adjustHeap(a, max, size);
      }
  }

  // 交换数组的值
  function swap(a, i, j) {
    var temple = a[i];
    a[i] = a[j];
    a[j] = temple;
  }

}





// 测试排序
console.log("元数据   :" + datas+ "\n");

var result;


// var result = bubbleSort(datas);
// var result = selectSort(datas);
// var result = insertSort(datas);
// var result = shellSort(datas);
// result = quickSort(datas,0,datas.length - 1);
result = mergeSort(datas);
// result = bucketSort(datas);
// resutl = heapSort(datas);

console.log("排列结果 :" + datas);