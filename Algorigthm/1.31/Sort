
var datas = [23,3,43,12,78,2,90,4,1,101,8,413,5,2];

// 冒泡排序
function bubbleSort(numbers) {

  for (var i = 0; i < numbers.length; i++) {
    for (var j = 0; j < numbers.length - 1 - i; j++) {
      if (numbers[j] > numbers[j+1]) {
        var temple = numbers[j+1];
        numbers[j+1] = numbers[j];
        numbers[j] = temple;
      }
    }
  }
  return numbers;
}

// 选择排序
function selectSort(numbers) {

  for (var i = 0; i < numbers.length; i++) {
    for(var j = i + 1;j < numbers.length; j++) {
      if (numbers[j] < numbers[i]) {
        var temple = numbers[i];
        numbers[i] = numbers[j];
        numbers[j] = temple;
      }
    }
  }
  return numbers;
}

// 插入排序
function insertSort(numbers) {

  for (var i = 1 ; i < numbers.length ; i++) {
    var j = i - 1;
    var number = numbers[i];
    while (j > -1 && numbers[j] > number) {
      var temple = numbers[j + 1];
      numbers[j + 1] = numbers[j];
      j--;
    }
    j++;
    numbers[j] = number;
  }
  return numbers;
}

// 希尔排序
function shellSort(numbers) {
  var gaps = [5,3,1];

  for(var i = 0 ; i < gaps.length ; i++) {

    var gap = gaps[i];

    for (var index = 0 ; index < numbers.length / gap ; index++) {
      var indexValue = numbers[index];
      var j = index + gap;

      for (var j = index + gap; j < numbers.length ; j += gap) {
        var value_j = numbers[j];
        var befor_j = j - gap;

        while (befor_j > index - gap && numbers[befor_j] > value_j) {
          var temp = numbers[befor_j + gap];
          numbers[befor_j + gap] = numbers[befor_j];
          befor_j -= gap;
        }

        befor_j += gap;
        numbers[befor_j] = value_j;
      }
    }
  }
  return numbers;
}


// 快速排序*****************************************************************************************************************************

function division(numbers, left, right) {

  if (left > right)
    return;

  var pivot = numbers[left];

  while (left < right) {

    while (left < right && numbers[right] > pivot) {
      right--;
    }
    numbers[left] = numbers[right];

    while (left < right && numbers[left] <= pivot) {
      left++;
    }
    numbers[right] = numbers[left];
  }
  numbers[left] = pivot;
  return left;
}

function quickSort(numbers,leftIndex,rightIndex) {
  if (leftIndex < rightIndex) {
    var mid = division(numbers,leftIndex,rightIndex);
    quickSort(numbers,leftIndex,mid -1);
    quickSort(numbers,mid + 1, rightIndex);
  }
}

// 归并排序 *****************************************************************************************************************************

function mergeSort(numbers) {

  function min(a, t) {
   return a < t ? a : t;
  }

  var gap = 1;
  var b = [];
  var k;
  var len = numbers.length;

  for (gap = 1; gap < len; gap +=gap) {

    k = 0;

    for (var index = 0; index < len; index += gap + gap) {

      var low1 = index;
      var end1 = min(index + gap,len);

      var low2 = end1;
      var end2 = min(low2 + gap,len);

      while (low1 < end1 && low2 < end2) {
        b[k++] = numbers[low1] < numbers[low2] ? numbers[low1++] : numbers[low2++];
      }

      while (low1 < end1) {
        b[k++] = numbers[low1++];
      }

      while (low2 < end2) {
        b[k++] = numbers[low2++]
      }
    }
    for (var i = 0 ; i < len ; i++) {
      numbers[i] = b[i];
    }
    console.log(numbers);
  }
}

// 测试排序
console.log("元数据   :" + datas+ "\n");

var result;

// var result = bubbleSort(datas);
// var result = selectSort(datas);
// var result = insertSort(datas);
// var result = shellSort(datas);
// result = quickSort(datas,0,datas.length - 1);
result = mergeSort(datas);

console.log("排列结果 :" + datas);